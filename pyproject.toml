[build-system]
requires = [ "setuptools", "setuptools-scm" ]
build-backend = "setuptools.build_meta"

[project]
name = "lauren"
dynamic = [ "version" ]
description = "Large AI Utility for Retrieval and Embedding with Neural Networks"
readme = "README.rst"
requires-python = ">=3.12"
license = "MIT"
authors = [
  { name = "Akshay Mestry", email = "xa@mes3.dev" },
]
maintainers = [
  { name = "Akshay Mestry", email = "xa@mes3.dev" },
]
keywords = [ 
  "ai",
  "embeddings",
  "framework",
  "machine-learning",
  "neural-networks",
  "python",
  "pytorch",
  "retrieval",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Distributed Computing",
  "Typing :: Typed",
]
dependencies = [
  "chromadb>=0.4.0",
  "faiss-cpu>=1.7.0",
  "fastapi>=0.100.0",
  "google-search-results>=2.4.0",
  "numpy>=1.24.0",
  "openai>=1.0.0",
  "opentelemetry-api>=1.20.0",
  "opentelemetry-exporter-otlp-proto-grpc>=1.20.0",
  "opentelemetry-sdk>=1.20.0",
  "pydantic>=2.0.0",
  "python-multipart>=0.0.6",
  "typing-extensions>=4.5.0",
  "uvicorn[standard]>=0.23.0",
]

[project.optional-dependencies]
test = [
  "coverage[toml]>=7.0.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-benchmark>=5.1.0",
  "pytest-cov>=4.0.0",
  "pytest-html>=4.0.0",
  "pytest-mock>=3.10.0",
  "pytest-xdist>=3.0.0",
  "hypothesis>=6.70.0",
]
dev = [
  "black>=24.0.0",
  "flake8>=7.0.0",
  "flake8-bugbear>=24.0.0",
  "flake8-comprehensions>=3.14.0",
  "flake8-docstrings>=1.7.0",
  "flake8-pyproject>=1.2.0",
  "flake8-simplify>=0.21.0",
  "isort>=5.13.0",
  "mypy>=1.8.0",
  "pre-commit>=3.5.0",
  "ruff>=0.3.0",
  "tox>=4.11.0",
]

[project.scripts]
lauren = "lauren.cli:main"

[project.entry-points."lauren.plugins"]

[project.urls]
Homepage = "https://github.com/xames3/lauren/"
Repository = "https://github.com/xames3/lauren/"
Download = "https://pypi.org/project/lauren/"
Code = "https://github.com/xames3/lauren"
Issues = "https://github.com/xames3/lauren/issues"

[tool.setuptools]
packages = [ "lauren" ]

[tool.setuptools.dynamic]
version = { attr = "lauren.version" }

[tool.black]
line-length = 80
target-version = [ "py312", "py313" ]
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 80
force_single_line = true
force_sort_within_sections = false

[tool.mypy]
files = [ "lauren" ]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
namespace_packages = true
no_implicit_optional = true
pretty = true
show_absolute_path = true
show_column_numbers = true
show_error_codes = false
show_error_context = true
strict = true
strict_concatenate = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
disable_error_code = [
  "operator",
  "override",
  "union-attr",
]

[[tool.mypy.overrides]]
module = [
  "chromadb.*",
  "faiss.*",
  "google.*",
  "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--maxfail=5",
  "-ra",
  "--tb=short",
  "-qq",
  "--disable-warnings",
]
testpaths = [ "tests" ]
python_files = [ "test_*.py", "*_test.py" ]
norecursedirs = [ "archive", "build", "dist", ".git", ".tox", ".venv", "htmlcov" ]
python_classes = [ "Test*" ]
python_functions = [ "test_*" ]
minversion = "8.0"
markers = [
  "unit: marks tests as unit tests (fast, isolated tests)",
  "integration: marks tests as integration tests (tests component interactions)",
  "extensive: marks tests as extensive validation tests (comprehensive edge case testing)",
  "performance: marks tests as performance tests (stress testing and benchmarks)",
  "slow: marks tests as slow running (high iteration counts or heavy operations)",
  "fast: marks tests as fast running (quick performance tests)",
  "network: marks tests that require network access",
  "gpu: marks tests that require GPU resources",
]
filterwarnings = [
  "error",
  "ignore::UserWarning",
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
branch = true
source = [ "lauren" ]
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*",
  "*/site-packages/*",
  "*/venv/*",
  "*/archive/*",
  "*/migrations/*",
]
data_file = ".coverage"

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
sort = "Cover"
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
skip_covered = false
skip_empty = true

[tool.tox]
requires = [ "tox>=4.11" ]
env_list = [
  "py313",
  "py312",
  "lint",
  "format",
  "typecheck",
  "coverage"
]
package = "editable"
min_version = "4.0"

[tool.tox.env_run_base]
description = "Run the unit tests under {base_python}"
deps = [
  "pytest>=8.0.0",
  "pytest-cov>=4.0.0",
  "pytest-html>=4.0.0",
  "pytest-xdist>=3.0.0",
  "coverage[toml]>=7.0.0",
]
commands = [
  [ "pytest", "{posargs}" ]
]

[tool.tox.env.format]
description = "Run code formatters (black and isort)"
deps = [
  "black>=24.0.0",
  "isort>=5.13.0",
]
commands = [
  [ "isort", "--sl", "lauren" ],
  [ "black", "-q", "--line-length", "80", "lauren", "tests" ],
]

[tool.tox.env.typecheck]
description = "Run type checking"
deps = [
  "mypy>=1.8.0",
  "typing-extensions>=4.5.0",
]
commands = [
  [ "mypy", "lauren", "--config-file", "pyproject.toml", "--color-output" ],
]

[tool.tox.env.coverage]
description = "Generate coverage report"
deps = [
  "pytest>=8.0.0",
  "pytest-cov>=4.0.0",
  "coverage[toml]>=7.0.0",
]
commands = [
  [ "python", "-m", "pytest", "{posargs}", "--cov=lauren", "--cov-report=term-missing", "--cov-report=html:htmlcov", "--cov-fail-under=80" ],
  [ "coverage", "html" ],
]
